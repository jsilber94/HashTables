Step 4
This step works as inteneded the HashTable puts, gets and removes it's respected elements. Each operation takes less than 0 milliseconds according to the timer. The only collisions that happen are the values that overlap when hashed, (mod 100) they are then handled by their technique. Linear probing, the next available position is used. Quadratic probing uses the key plus an integer squared location, cut down then by the size to fit, until it finds the next available place. Seperate chaining uses a linked list style in order to add MapElement to the same location, each containing their key and value at the location. There aren't that many collisions due to the fact that the amount of values being placed into the table is half the size of the HashTable, therefore it won't take much time. Below are a selection of the values printed to the console.
------PUT------	------GET------	------REMOVE------
Size: 100	TIME: 0		TIME: 0
Elements: 11
Collisions: 1
Attempts: 0
TIME: 0

Step 5
1)Due to the fact that 150 is such a low value, and the hastable is only of size 100, there are at most 100 collisions for each value from 101 to 150. There is not a drastic time increase. But there are values that cannot be get because they could not be put into the HashTable.
2)The put could take longer if the length was a lot longer, however due to the fact that the length is smaller, it takes a lot less time in order to probe the table.
3)
------PUT------
Size: 101
Elements: 101
Collisions: 43
Attempts: 10
TIME: 0

------PUT------
Size: 100
Elements: 100
Collisions: 53
Attempts: 3
TIME: 0

There are less collisions with 101 before the table is filled, due to teh fact taht the numbers are not evenly divisible by 101, giving different remainder results, ie 38, 138, 1038, would all be 38 for 100, where as for 101, 38 would be 38, 138 would be 37, 1038 would be 28. Giving better seperation.

Step 6
------PUT------
Size: 32768
Elements: 10000
Collisions: 1153
Attempts: 0
TIME: 0
BUILD SUCCESSFUL (total time: 13 seconds)

The size increasing adds extra time as well as the general put starts taking a longer amount of time.
In order to run all the puts and the gets for the elements it takes around 12-13 seconds, which for a hastable is costly time, however the actual puts and get take under 0 milliseconds, which is still beneficial. The number of collisions also jump up.



